#!/usr/bin/env ruby
require "blackjack1"
Hand.deck, inputerror = CardDeck::Deck.new, "Invalid input. Please input '(h)it' or '(s)tay'"
dealer, player, view = Hand.new, Hand.new, proc do |player|
	puts "You have: #{player.view}"
	sleep(0.5)
	puts "Value: #{player.value}"
	sleep 1
	return nil
end
view.call player
unless player.blackjack?
	puts "The dealer is showing #{dealer.cards[1].abbr}\n"
	sleep 1
	loop do
		puts
		print view.call player
		print "(h)it or (s)tay? "
		action = gets.chomp.downcase
		player.hit if action.include?("h")
		break if action.include?("s") || player.value >= 21
	end
	puts ""
	unless player.bust?
		puts "You finished with #{player.value}."
	else
		puts "You busted @ #{player.value}."
	end
	sleep 2
	if dealer.blackjack?
		puts "Dealer got blackjack."
		puts; sleep 0.5
		puts "Dealer wins."
		sleep 2
		exit
	end
	puts
	while dealer.value <= Hand::MDHV
		puts "The dealer hits!"
		dealer.hit
		sleep 0.5
	end
	puts
	if dealer.bust? then puts "The dealer busted @ #{dealer.value}!"
	else
		puts "The dealer stays @ #{dealer.value}"
	end
	sleep 2
	puts compare_score player, dealer
else
	puts "You got blackjack!"
	puts; sleep 1
	puts "You win!"
	sleep 0.5
end
END {
	sleep(2)
	puts; puts
	print "Would you like to play again? (y/n) "
	`blackjack1` if gets.chomp.downcase.include? "y"
}
