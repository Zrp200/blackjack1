#!/usr/bin/env ruby
require "blackjack1"
Hand.deck = CardDeck::Deck.new
dealer, player, view = Hand.new, Hand.new, proc do |player|
	puts "You have: #{player.view}"
	sleep(0.5)
	puts "Value: #{player.value}"
	sleep(1)
end
view.call player
unless player.blackjack?
	puts "The dealer is showing #{dealer.cards[1].abbr}\n"
	sleep 1
	print "Hit or stay? "
	action = gets.chomp.downcase
	f = true if action == "hit"
	while action == "hit" and !player.bust?
		unless f
			puts
			print "Hit or stay? "
			action == gets.chomp.downcase
			break unless action == "hit"
		else
			f = false
		end 
		sleep(1)
		player.hit
		print view.call(player)
		sleep(1.5)
	end
	puts ""
	unless player.bust?
		puts "You finished with #{player.value}."
	else
		puts "You busted."
	end
	sleep 2
	if dealer.blackjack?
		puts "Dealer got blackjack."
		sleep 0.5
		puts "Dealer wins."
		sleep 2
		exit
	end
	puts
	while dealer.value <= Hand::MDHV
		puts "The dealer hit!"
		dealer.hit
		sleep 0.5
	end
	puts
	if dealer.bust? then puts "The dealer busted!"
	else
		puts "The dealer stays at #{dealer.value}"
	end
	sleep 2
	puts compare_score player, dealer
else
	puts "You got blackjack!"
	sleep 1
	puts "You win!"
	sleep 0.5
end
